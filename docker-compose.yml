services:
  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg15
    container_name: echograph-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-echograph}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-echograph}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U echograph"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - echograph-network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: echograph-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - echograph-network

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: echograph-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - echograph-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: echograph-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      - echograph-network

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: echograph-n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-changeme}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
    networks:
      - echograph-network

  # FastAPI Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: echograph-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://echograph:changeme@postgres:5432/echograph
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - MINIO_USE_SSL=false
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - API_SECRET_KEY=${API_SECRET_KEY:-change-this-to-a-random-secret-key}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./api:/app
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      qdrant:
        condition: service_started
    networks:
      - echograph-network
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: echograph-celery-worker
    command: celery -A tasks worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://echograph:changeme@postgres:5432/echograph
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - ./api:/app
      - ./ingestion:/app/ingestion
      - ./processing:/app/processing
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - api
    networks:
      - echograph-network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: echograph-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - api
    networks:
      - echograph-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  qdrant_data:
  n8n_data:

networks:
  echograph-network:
    driver: bridge
